(defwidget _clock []
        (box :halign "end"
                (tooltip
                        (calendar)
                        (label :text "${formattime(EWW_TIME, "%H:%M %b %d, %Y ")}" :active true)
                )
        )
)

(defwidget metric [value label onchange]
        (box :orientation "h" :class "metric" :space-evenly false
                (box :class "label" label)
                (scale :min 0 :max 100 :round-digits 2 :active {onchange != ""} :value value :onchange onchange)
        )
)

(deflisten volume :initial 50
        "tail -F $HOME/.local/tmp/volume.pipe"
)
(defwidget _sink []
        (box :class "sink" :orientation "h" :halign "end" :space-evenly false
                (metric :label "ðŸ”Š" :value volume :onchange "setvol sink {}%")
        )
)
(deflisten mic_vol :initial 80
        "tail -F $HOME/.local/tmp/mic.pipe"
)
(defwidget _mic []
        (box :class "mic" :orientation "h" :halign "end" :space-evenly false
                (metric :label "ðŸŽ™" :value mic_vol :onchange "setvol source {}%")
        )
)

(deflisten music :initial ""
        "playerctl --follow metadata --format '{{ artist }} - {{ title }}' || true"
)
(defwidget _music []
        (box :class "music"
                :orientation "h"
                :space-evenly false
                :halign "center"
                {music != "" ? "ðŸŽµ${music}" : ""})
)

(deflisten activewindow :initial '{"xwayland":false,"title":""}'
        "tail -F $HOME/.local/tmp/activewindow.pipe"
)
(defwidget _activewindow []
        (box :class "activewindow"
                (label :limit-width 50 :text "${activewindow.xwayland ? 'X: ' : ''}${activewindow.title}")
        )
)

(deflisten activeworkspaces :initial "[]"
        "tail -F $HOME/.local/tmp/workspaces.pipe"
)
(defwidget _activeworkspaces [mon]
        (box :class "activeworkspaces" :orientation "h"
                (for ws in activeworkspaces
                        (button :visible {true ? "${ws.monitorID}" == "${mon}" : false}
                                :onclick "hyprctl dispatch workspace ${ws.id}"
                                "${ws.id}"
                        )
                )
        )
)

(defwidget _systray []
        (box :orientation "h"
                (systray :spacing 5 :space-evenly true :prepend-new true)
        )
)

(defwindow bar [mon]
        :class "bar"
        :monitor mon
        :stacking "fg"
        :exclusive true
        :geometry (geometry :width "100%" :anchor "top center")
        (box :orientation "h"
                (box :halign "start"
                        (_activeworkspaces :mon mon)
                )
                (box
                        (_activewindow)
                )
                (box :halign "end"
                        (_mic)
                        (_sink)
                        (_clock)
                )
        )
)
