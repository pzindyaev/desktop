(defwidget _clock []
        (box :halign "end"
                (tooltip
                        (calendar)
                        (label :text "${formattime(EWW_TIME, "%H:%M %b %d, %Y ")}" :active true)
                )
        )
)

(defwidget metric [value label onchange onclick]
        (box :orientation "h" :class "metric" :space-evenly false
                (eventbox :onclick onclick :timeout "10s"
                        (box :class "label" label)
                )
                (scale :min 0 :max 100 :round-digits 2 :active {onchange != ""} :value value :onchange onchange)
        )
)

(deflisten volume :initial 50
        "tail -F $HOME/.local/tmp/volume.pipe"
)
(defwidget _sink []
        (box :class "sink" :orientation "h" :halign "end" :space-evenly false
                (metric :label "󰕾 " :value volume :onchange "setvol sink {}%" :onclick "easyeffects")
        )
)
(deflisten mic_vol :initial 80
        "tail -F $HOME/.local/tmp/mic.pipe"
)
(defwidget _mic []
        (box :class "mic" :orientation "h" :halign "end" :space-evenly false
                (metric :label "󰍬 " :value mic_vol :onchange "setvol source {}%" :onclick "easyeffects")
        )
)

(deflisten music :initial ""
        "playerctl --follow metadata --format '{{ artist }} - {{ title }}' || true"
)
(defwidget _music []
        (box :class "music"
                :orientation "h"
                :space-evenly false
                :halign "center"
                (label :limit-width 50 :text {music != "" ? "󰎇 ${music}" : ""})
        )
)

(deflisten activewindow :initial '{"xwayland":false,"title":""}'
        "tail -F $HOME/.local/tmp/activewindow.pipe"
)
(defwidget _activewindow []
        (box :class "activewindow"
                (label :limit-width 50 :text "${activewindow.xwayland ? 'X: ' : ''}${activewindow.title}")
        )
)

(deflisten activeworkspaces :initial "[]"
        "tail -F $HOME/.local/tmp/workspaces.pipe"
)
(defwidget _activeworkspaces [mon]
        (box :class "activeworkspaces" :orientation "h"
                (for ws in activeworkspaces
                        (button :visible {true ? "${ws.monitorID}" == "${mon}" : false}
                                :onclick "hyprctl dispatch workspace ${ws.id}"
                                "${ws.id}"
                        )
                )
        )
)

(defwidget _battery []
        (box :orientation "h"
                (label :text "   ${EWW_BATTERY != `` ? round(EWW_BATTERY?.total_avg, 1) : ""}%")
        )
)

(defwidget _systray []
        (box :orientation "h" 
                (systray :spacing 5 :space-evenly true :prepend-new true)
        )
)

(defpoll netstate :interval "5s" :initial "{}"
        "netstate"
)
(defwidget _netstate []
        (box :class "netstate" :orientation "h"
                (tooltip
                        (box :orientation "v"
                                (for n in netstate
                                        (label :text "${n.name}: ${n.state} ${n.speed}Mb/s")
                                )
                        )
                        (label :text "󰈀")
                )
        )
)

(defvar power-menu-visible false)

(defwidget power-menu []
        (box :orientation "v" :class "power-menu" :visible power-menu-visible
                (button :onclick "systemctl poweroff" :class "power-button" "󰐥 Shutdown")
                (button :onclick "systemctl reboot" :class "power-button" "󰜉 Reboot")
        )
)
(defwidget _power-button []
        (button :onclick {power-menu-visible ? "${EWW_CMD} close power-menu-window && ${EWW_CMD} update power-menu-visible=false" : "${EWW_CMD} open power-menu-window && ${EWW_CMD} update power-menu-visible=true"} :class "power-main-button" "󰐥")
)
(defwindow power-menu-window []
        :monitor 0
        :geometry (geometry :width "200px" :height "100px" :anchor "top right")
        :stacking "fg"

        (power-menu)
)

(defwindow bar [mon]
        :class "bar"
        :monitor mon
        :stacking "fg"
        :exclusive true
        :geometry (geometry :width "100%" :anchor "top center")
        (box :orientation "h"
                (box :halign "start" :space-evenly false
                        (_activeworkspaces :mon mon)
                        (_activewindow)
                )
                (box :halign "center" :space-evenly false :visible {mon == 0 ? true : false }
                        (_music)
                )
                (box :halign "end" :space-evenly false :visible {mon == 0 ? true : false }
                        (_battery)
                        (_netstate)
                        (_mic)
                        (_sink)
                        (_clock)
                        (_systray)
                        (_power-button)
                )
        )
)
